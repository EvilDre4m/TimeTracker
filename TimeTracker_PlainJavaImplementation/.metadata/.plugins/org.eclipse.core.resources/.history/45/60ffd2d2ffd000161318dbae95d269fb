package at.fhv.timetracker.project;

import java.util.ArrayList;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.FormParam;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

import at.fhv.timetracker.user.User;
import at.fhv.timetracker.user.UserDAO;

@Path("/ProjectService")
public class ProjectService {

	private UserDAO userDao = new UserDAO();
	private ProjectDAO projectDao = new ProjectDAO();
	private static final String SUCCESS = "<result>success</result>";
	private static final String FAIL = "<result>failure</result>";
	
	@PUT
	@Path("/projects")
	@Produces(MediaType.APPLICATION_XML)
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	public String addProject(@FormParam("id") Integer id,
			@FormParam("owningUserId") Integer ouId,
			@FormParam("description") String description,
			@FormParam("name") String name){
		
		if(id == null || ouId == null || description == null){
			return FAIL;
		} else if (name.equals("")) {
			return FAIL;
		}
		
		User owningUser = null;
		ArrayList<User> allUsers = userDao.getAllUsers();
		for(User user : allUsers){
			if(user.getId() == ouId){
				owningUser = new User(user);
				break;
			}
		}
		
		if(owningUser == null){
			//Couldn't find the specified user
			return FAIL;
		}
		
		Project newProject = new Project(owningUser, description, name, id);
		int rc = projectDao.addProject(newProject);
		if(rc == 0){
			return SUCCESS;
		} else {
			return FAIL;
		}
		
	}
	
	@GET
	@Path("/projects")
	@Produces(MediaType.APPLICATION_XML)
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	public Project searchProject(@FormParam("desc") String searchDescr){
		//searchDescr = Description to search for
		
		if(searchDescr.equals("")){
			return null;
		}
		
		ArrayList<Project> allProjects = projectDao.getAllProjects();
		for(Project proj : allProjects){
			if(proj.getDescription().contains(searchDescr) || proj.getName().contains(searchDescr) ){
				return new Project(proj);
			}
		}
		
		return null;
	}
	
	@POST
	@Path("/projects")
	@Produces(MediaType.APPLICATION_XML)
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	public void editProject(@FormParam("id") Integer id,
			@FormParam("owningUserId") Integer ouId,
			@FormParam("description") String description,
			@FormParam("name") String name){
		projectDao.deleteProject(id);
		//TODO Body --> basically is delete project with id xyz and put the submitted one in its place
	}
	
	@DELETE
	@Path("/projects")
	@Produces(MediaType.APPLICATION_XML)
	@Consumes(MediaType.APPLICATION_FORM_URLENCODED)
	public void deleteProject(@FormParam("id") Integer id){
		projectDao.deleteProject(id);
	}
	
}
